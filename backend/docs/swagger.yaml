basePath: /api
definitions:
  types.AuthResponse:
    description: Authentication response payload
    properties:
      message:
        example: Login successful
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user_id:
        example: 12345
        type: integer
    type: object
  types.ErrorResponse:
    description: Error response payload
    properties:
      error:
        example: Invalid credentials
        type: string
      message:
        example: Email or password is incorrect
        type: string
    type: object
  types.FileUploadError:
    description: File upload error response payload
    properties:
      error:
        example: Invalid file
        type: string
      error_code:
        example: FILE_TOO_LARGE
        type: string
      message:
        example: File size exceeds maximum limit of 5MB
        type: string
    type: object
  types.LoginRequest:
    description: User login request payload
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: securePassword123!
        type: string
    required:
    - email
    - password
    type: object
  types.ProfileResponse:
    description: User profile response payload (authenticated user's own profile)
    properties:
      avatar_url:
        example: /api/user/12345/avatar
        type: string
      bio:
        example: I love playing sports and meeting new people!
        type: string
      city:
        example: New York
        type: string
      country:
        example: USA
        type: string
      created_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      display_name:
        example: John Doe
        type: string
      email:
        example: user@example.com
        type: string
      has_avatar:
        example: true
        type: boolean
      id:
        example: 12345
        type: integer
      sports:
        example:
        - '["football"'
        - '"basketball"]'
        items:
          type: string
        type: array
      updated_at:
        example: "2024-01-20T14:45:00Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
  types.PublicProfileResponse:
    description: Public profile response payload (other users' profiles)
    properties:
      avatar_url:
        example: /api/user/12345/avatar
        type: string
      bio:
        example: I love playing sports and meeting new people!
        type: string
      city:
        example: New York
        type: string
      country:
        example: USA
        type: string
      created_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      display_name:
        example: John Doe
        type: string
      has_avatar:
        example: true
        type: boolean
      id:
        example: 12345
        type: integer
      is_following:
        example: false
        type: boolean
      sports:
        example:
        - '["football"'
        - '"basketball"]'
        items:
          type: string
        type: array
      updated_at:
        example: "2024-01-20T14:45:00Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
  types.RegisterRequest:
    description: User registration request payload
    properties:
      bio:
        example: I love playing sports and meeting new people!
        type: string
      confirm_password:
        example: securePassword123!
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      location:
        example: New York, NY
        type: string
      password:
        example: securePassword123!
        minLength: 8
        type: string
      sports:
        example:
        - '["football"'
        - '"basketball"]'
        items:
          type: string
        minItems: 1
        type: array
      username:
        example: johndoe
        type: string
    required:
    - confirm_password
    - email
    - first_name
    - last_name
    - location
    - password
    - sports
    - username
    type: object
  types.SearchUserResult:
    description: Individual user search result
    properties:
      avatar_url:
        example: /api/user/12345/avatar
        type: string
      display_name:
        example: John Doe
        type: string
      has_avatar:
        example: true
        type: boolean
      id:
        example: 12345
        type: integer
      username:
        example: johndoe
        type: string
    type: object
  types.SearchUsersResponse:
    description: User search response with pagination
    properties:
      has_more:
        example: true
        type: boolean
      total:
        example: 25
        type: integer
      users:
        items:
          $ref: '#/definitions/types.SearchUserResult'
        type: array
    type: object
  types.UploadResponse:
    description: File upload response payload
    properties:
      avatar_url:
        example: /api/user/12345/avatar
        type: string
      message:
        example: Avatar uploaded successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
externalDocs:
  description: Link2Sport Documentation
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: |-
    A comprehensive API for connecting sports enthusiasts, managing profiles, and facilitating sports-related activities.
    This API provides authentication, user profile management, search functionality, and file upload capabilities.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Sport Connect API
  version: "1.0"
paths:
  /api/v1/:
    get:
      consumes:
      - application/json
      description: Get welcome message and version information for the Link2Sport
        API
      produces:
      - application/json
      responses:
        "200":
          description: 'Welcome message and API version" example({"message": "Welcome
            to the API", "version": "1.0.0"})'
          schema:
            properties:
              message:
                type: string
              version:
                type: string
            type: object
      summary: API welcome message
      tags:
      - General
  /auth/check-email:
    post:
      consumes:
      - application/json
      description: Verify if an email address is available for registration
      parameters:
      - description: Email to check
        in: body
        name: email
        required: true
        schema:
          properties:
            email:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: 'Email is available" example({"message": "Email is available",
            "email": "user@example.com"})'
          schema:
            properties:
              email:
                type: string
              message:
                type: string
            type: object
        "400":
          description: Invalid request format or email format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Check email availability
      tags:
      - Authentication
  /auth/check-username:
    post:
      consumes:
      - application/json
      description: Verify if a username is available for registration
      parameters:
      - description: Username to check
        in: body
        name: username
        required: true
        schema:
          properties:
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: 'Username is available" example({"message": "Username is available",
            "username": "johndoe"})'
          schema:
            properties:
              message:
                type: string
              username:
                type: string
            type: object
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: Username already exists
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Check username availability
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returns JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with JWT token
          schema:
            $ref: '#/definitions/types.AuthResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Database error or token generation failed
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with profile information and associated
        sports
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered
          schema:
            $ref: '#/definitions/types.AuthResponse'
        "400":
          description: Invalid request format or password mismatch
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: Username already taken
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /health:
    get:
      consumes:
      - application/json
      description: Get the health status of the API and database connection
      produces:
      - application/json
      responses:
        "200":
          description: 'API health status" example({"status": "healthy", "message":
            "Backend API is running", "database": "connected"})'
          schema:
            properties:
              database:
                type: string
              message:
                type: string
              status:
                type: string
            type: object
      summary: Health check
      tags:
      - Health
  /profile:
    get:
      consumes:
      - application/json
      description: Retrieve the authenticated user's complete profile information
        including sports and avatar
      produces:
      - application/json
      responses:
        "200":
          description: User profile information
          schema:
            $ref: '#/definitions/types.ProfileResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Profile not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user's profile
      tags:
      - Profile
  /profile/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve another user's public profile information by user ID
      parameters:
      - description: User ID
        example: 12345
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Public profile information
          schema:
            $ref: '#/definitions/types.PublicProfileResponse'
        "400":
          description: Invalid user ID or trying to access own profile
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Profile not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get public user profile
      tags:
      - Profile
  /search/users:
    get:
      consumes:
      - application/json
      description: Search for other users by username or display name with pagination
      parameters:
      - description: Search query (minimum 2 characters)
        example: '"john"'
        in: query
        minLength: 2
        name: query
        required: true
        type: string
      - default: 10
        description: Number of results per page (1-50)
        example: 10
        in: query
        maximum: 50
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Number of results to skip
        example: 0
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Search results with pagination info
          schema:
            $ref: '#/definitions/types.SearchUsersResponse'
        "400":
          description: Invalid request or query too short
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search for users
      tags:
      - Search
  /upload/avatar:
    delete:
      consumes:
      - application/json
      description: Remove the current user's custom avatar image, reverting to default
        avatar
      produces:
      - application/json
      responses:
        "200":
          description: Avatar deleted successfully
          schema:
            $ref: '#/definitions/types.UploadResponse'
        "400":
          description: No avatar to delete
          schema:
            $ref: '#/definitions/types.FileUploadError'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/types.FileUploadError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/types.FileUploadError'
        "500":
          description: Database error
          schema:
            $ref: '#/definitions/types.FileUploadError'
      security:
      - BearerAuth: []
      summary: Delete user avatar
      tags:
      - Upload
    post:
      consumes:
      - multipart/form-data
      description: Upload a new avatar image for the authenticated user. Accepts JPEG,
        PNG, GIF, and WebP formats. Maximum file size is 5MB.
      parameters:
      - description: Avatar image file (JPEG, PNG, GIF, WebP, max 5MB)
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Avatar uploaded successfully
          schema:
            $ref: '#/definitions/types.UploadResponse'
        "400":
          description: No file uploaded or invalid file format
          schema:
            $ref: '#/definitions/types.FileUploadError'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/types.FileUploadError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/types.FileUploadError'
        "500":
          description: File processing or database error
          schema:
            $ref: '#/definitions/types.FileUploadError'
      security:
      - BearerAuth: []
      summary: Upload user avatar
      tags:
      - Upload
  /user/{userId}/avatar:
    get:
      consumes:
      - application/json
      description: Retrieve a user's avatar image by user ID. Returns custom uploaded
        avatar or redirects to default avatar
      parameters:
      - description: User ID
        example: 12345
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - image/jpeg
      - image/png
      - image/gif
      - image/webp
      responses:
        "200":
          description: User's avatar image
          schema:
            type: string
        "302":
          description: Redirect to default avatar
          schema:
            type: string
        "400":
          description: User ID is required
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: No avatar found
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get user avatar
      tags:
      - Upload
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: User authentication and registration endpoints
  name: Authentication
- description: User profile management endpoints
  name: Profile
- description: User search functionality
  name: Search
- description: File upload and avatar management
  name: Upload
- description: API health and status endpoints
  name: Health
- description: General API information endpoints
  name: General
